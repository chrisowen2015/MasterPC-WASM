@page "/products/cpus"

@using MasterPC_WASM.Components
@using Microsoft.AspNetCore.Authorization;
@using MasterPC_WASM.Services;
@using MasterPC_WASM.Components.Tables;

@inject ICPUService cpuService

<PageTitle> CPUs </PageTitle>

<div>
    <div style="padding-top: 2em; display: flex; justify-content: center; align-items: center; background-color: @(theme is not null ? theme.Palette.Tertiary : null)">
        <MudStack Row="false">
            <MudText Align="Align.Center" Typo="Typo.h2 " Style="font-weight: 500"> Select Your CPU </MudText>
            <div style="display: flex; justify-content: center">
                <MudBreadcrumbs Items="@breadcrumbs">
                    <SeparatorTemplate>
                        <MudIcon Icon="@Icons.Material.Filled.ChevronRight" Size="Size.Small" />
                    </SeparatorTemplate>
                </MudBreadcrumbs>
            </div>
        </MudStack>
    </div>

    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="margin-top: 2em">
        <MudGrid>
            <MudItem xs="12" lg="3">
                <MudPaper Elevation="1">
                    <CompatibilityChecker CompatibilityFilter="compatibilityFilter" />

                    <MudStack Row Justify="Justify.SpaceBetween" Style="padding: 16px 24px">
                        <MudText Typo="Typo.h6" >
                            Filters
                        </MudText>
                    
                        @if(filterChipList.Count > 0)
                        {
                            <MudButton Size="Size.Small" OnClick="ClearFilters">Clear All</MudButton>
                        }
                    </MudStack>
                    @if(filterChipList.Count() > 0)
                    {
                    <div style="padding: 0 1em 1em 1em">
                        @foreach (var chip in filterChipList)
                        {
                            @switch(chip.Item1)
                            {
                                case "Price":
                                    <MudChip id="@chip.Item1" Text="@("Price:  $" + chip.Item2)" Variant="Variant.Filled" Color="Color.Secondary" OnClose="@((filterChip) => UpdateFilterChips(filterChip.FieldId, null))" />
                                    break;
                                case "TDP":
                                    <MudChip id="@chip.Item1" Text="@("TDP: " + chip.Item2)" Variant="Variant.Filled" Color="Color.Secondary" OnClose="@((filterChip) => UpdateFilterChips(filterChip.FieldId, null))" />
                                    break;
                                case "Core Count":
                                    <MudChip id="@chip.Item1" Text="@("Core Count: " + chip.Item2)" Variant="Variant.Filled" Color="Color.Secondary" OnClose="@((filterChip) => UpdateFilterChips(filterChip.FieldId, null))" />
                                    break;
                                case "Manufacturer":
                                    <MudChip id="@chip.Item1" Text="@("Manufacturer: " + chip.Item2)" Variant="Variant.Filled" Color="Color.Secondary" OnClose="@((filterChip) => UpdateFilterChips(filterChip.FieldId, null))" />
                                    break;
                            }
                        }
                    </div>
                    }

                    <MudDivider />
                    
                    <div style="padding: 16px 24px 16px 24px">
                        <b>Price (Max)</b>
                        <MudSlider T="double?" ValueLabel="true" Min="0" Max="cpus.Max(cpu => cpu.Price)" Style="padding-top: 1em" Value="priceSlider" ValueChanged="(value) => priceFilterChanged(value)" />
                    </div>

                     <MudExpansionPanels>
                         <MudExpansionPanel Style="margin: 0px">
                             <TitleContent>
                                 <MudText Typo="Typo.h6">Manufacturers</MudText>
                             </TitleContent>
                             <ChildContent>
                                 <MudStack Row="false">
                                     <MudCheckBox T="bool" Value="@(manufacturerFilter == "All")" ValueChanged="@(isChecked => manufacturerFilterChanged(isChecked, "All"))">All</MudCheckBox>
                                     <MudCheckBox T="bool" Value="@(manufacturerFilter == "AMD")" ValueChanged="@(isChecked => manufacturerFilterChanged(isChecked, "AMD"))">AMD</MudCheckBox>
                                     <MudCheckBox T="bool" Value="@(manufacturerFilter == "Intel")" ValueChanged="@(isChecked => manufacturerFilterChanged(isChecked, "Intel"))">Intel</MudCheckBox>
                                 </MudStack>
                             </ChildContent>
                         </MudExpansionPanel>

                         <MudExpansionPanel Style="margin: 0px">
                             <TitleContent>
                                 <MudText Typo="Typo.h6">Socket</MudText>
                             </TitleContent>
                             <ChildContent>
                                 <MudText Typo="Typo.body1">Sockets Go Here</MudText>
                             </ChildContent>
                         </MudExpansionPanel>

                         <MudExpansionPanel Style="margin: 0px">
                             <TitleContent>
                                 <MudText Typo="Typo.h6">Core Count</MudText>
                             </TitleContent>
                             <ChildContent>
                                 <MudSlider T="int?" ValueLabel Min="cpus.Min(cpu => cpu.CoreCount)" Max="cpus.Max(cpu => cpu.CoreCount)" Style="padding: 0 1em" Value="coreCountSlider" ValueChanged="(value) => coreCountFilterChanged(value)" />
                             </ChildContent>
                         </MudExpansionPanel>

                         <MudExpansionPanel Style="margin: 0px">
                             <TitleContent>
                                 <MudText Typo="Typo.h6">TDP</MudText>
                             </TitleContent>
                             <ChildContent>
                                 <MudSlider T="int?" ValueLabel Min="cpus.Min(cpu => cpu.TDP)" Max="cpus.Max(cpu => cpu.TDP)" Style="padding: 0 1em" Value="tdpSlider" ValueChanged="(value) => tdpFilterChanged(value)" />
                             </ChildContent>
                         </MudExpansionPanel>
                     </MudExpansionPanels>
                 </MudPaper>
             </MudItem>

             <MudItem xs="12" lg="9">
                 <CPUTable Elements="@cpusToRender" />
             </MudItem>
         </MudGrid>
     </MudContainer>
 </div>

 @code {
    [CascadingParameter (Name = "theme")]
    private MyMudTheme? theme { get; set; }

    // Filter for enabling Compatibility check for PC parts compatibility (Needs to be implemented in the future)
    private bool compatibilityFilter = true;

    List<(string, string)> filterChipList = new List<(string, string)>();

    // Slider values for filtering
    private double? priceSlider { get; set; }
    private int? tdpSlider { get; set; }
    private int? coreCountSlider { get; set; }

    // Selected Filter for Manufacturer
    private string manufacturerFilter { get; set; } = "All";

    private string description = "";
    private string title = "";
    private List<CPUVM> cpus = new List<CPUVM>();
    private List<CPUVM> cpusToRender = new List<CPUVM>();

    private List<BreadcrumbItem> breadcrumbs = new List<BreadcrumbItem>()
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Products", href: "/products", icon: Icons.Material.Filled.ProductionQuantityLimits),
        new BreadcrumbItem("CPUs", href: "/products/cpus", icon: Icons.Material.Filled.ProductionQuantityLimits, disabled: true),
    };

    //private List<string> socketList = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        cpus = await cpuService.GetCPUsAsync();
        cpusToRender = cpus;

        priceSlider = cpus.Max(cpu => cpu.Price);
        coreCountSlider = cpus.Max(cpu => cpu.CoreCount);
        tdpSlider = cpus.Max(cpu => cpu.TDP);

        //socketList = cpus.Select(cpu => cpu.Socket).Distinct().ToList();

        await base.OnInitializedAsync();
    }

    private void Filter()
    {
        cpusToRender = cpus.Where(cpu =>
            cpu.Price <= priceSlider &&
            cpu.TDP <= tdpSlider &&
            cpu.CoreCount <= coreCountSlider &&
            (manufacturerFilter == "All" || cpu.Manufacturer == manufacturerFilter)
        ).ToList();
    }

    private void ClearFilters(){
        priceSlider = cpus.Max(cpu => cpu.Price);
        coreCountSlider = cpus.Max(cpu => cpu.CoreCount);
        tdpSlider = cpus.Max(cpu => cpu.TDP);
        manufacturerFilter = "All";
        filterChipList.Clear();
        Filter();}

    private void priceFilterChanged(double? value)
    {
        priceSlider = value;
        if(value == cpus.Max(cpu => cpu.Price))
        {
            UpdateFilterChips("Price", null);
        }
        else
        {
            UpdateFilterChips("Price", value?.ToString());
        }
    }

    private void manufacturerFilterChanged(bool isChecked, string manufacturer)
    {
        if (!isChecked)
        {
            manufacturerFilter = "All";
            UpdateFilterChips("Manufacturer", null);
        }
        else
        {
            manufacturerFilter = manufacturer;
            UpdateFilterChips("Manufacturer", manufacturer?.ToString());
        }

    }

    private void tdpFilterChanged(int? value)
    {
        tdpSlider = value;

        if(value == cpus.Max(cpu => cpu.TDP))
        {
            UpdateFilterChips("TDP", null);
        }
        else
        {
            UpdateFilterChips("TDP", value?.ToString());
        }
    }

    private void coreCountFilterChanged(int? value)
    {
        coreCountSlider = value;

        if(value == cpus.Max(cpu => cpu.CoreCount))
        {
            UpdateFilterChips("Core Count", null);
        }
        else
        {
            UpdateFilterChips("Core Count", value?.ToString());
        }
    }

    private void UpdateFilterChips(string filterType, string? filterValue)
    {
        bool hasFilter = filterChipList.Any(chip => chip.Item1 == filterType);

        if (hasFilter && !String.IsNullOrEmpty(filterValue))
        {
            filterChipList[filterChipList.FindIndex(chip => chip.Item1 == filterType)] = (filterType, filterValue);
        }
        else if (hasFilter && String.IsNullOrEmpty(filterValue))
        {
            switch (filterType)
            {
                case "Price":
                    priceSlider = cpus.Max(cpu => cpu.Price);
                    break;
                case "TDP":
                    tdpSlider = cpus.Max(cpu => cpu.TDP);

                    break;
                case "Core Count":
                    coreCountSlider = cpus.Max(cpu => cpu.CoreCount);
                    break;
                case "Manufacturer":
                    manufacturerFilter = "All";
                    break;
            };

            filterChipList.Remove(filterChipList.First(chip => chip.Item1 == filterType));
        }
        else if(!hasFilter && !String.IsNullOrEmpty(filterValue))
        {
            filterChipList.Add((filterType, filterValue));
        }

        Filter();
    }
}
