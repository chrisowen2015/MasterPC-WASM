@page "/admin"

@attribute [Authorize(Policy = "superusers")]

@using MasterPC_WASM.Components.Tables;
@using MasterPC_WASM.Services;
@using MasterPC_WASM.Utils;
@using Shared.View_Models;

@inject ICPUService cpuService;
@inject ICaseService caseService;

<div>
    <div style="padding-top: 2em; display: flex; justify-content: center; align-items: center; background-color: @(theme is not null ? theme.Palette.Tertiary : null)">
        <MudText Align="Align.Center" Typo="Typo.h2 " Style="font-weight: 500"> Admin Dashboard </MudText>
    </div>

    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="margin-top: 2em">
        <MudGrid>
            <MudItem sm="12">
                <MudText Align="Align.Center" Typo="Typo.h4">
                    Select the desired Entities to operate on.
                </MudText>
            </MudItem>

            <MudItem sm="12">
                <MudStack AlignItems="AlignItems.Center">
                    <MudRadioGroup T="String" ValueChanged="(value) => RadioButtonChanged(value)">
                        <MudRadio Value="@("Cases")">Cases</MudRadio>
                        <MudRadio Value="@("CPUCoolers")">CPU Coolers</MudRadio>
                        <MudRadio Value="@("CPUs")">CPUs</MudRadio>
                        <MudRadio Value="@("GPUs")">GPUs</MudRadio>
                        <MudRadio Value="@("Motherboards")">Motherboards</MudRadio>
                        <MudRadio Value="@("PSUs")">PSUs</MudRadio>
                        <MudRadio Value="@("RAM")">RAM</MudRadio>
                        <MudRadio Value="@("Storage")">Storage</MudRadio>
                    </MudRadioGroup>
                </MudStack>
            </MudItem>

            <MudItem sm="12">
                <MudText Align="Align.Center" Typo="Typo.h5">
                    Send to Database?
                </MudText>
            </MudItem>

            <MudItem sm="12">
                <MudStack AlignItems="AlignItems.Center">
                    <MudRadioGroup @bind-Value="SendToDatabase">
                        <MudRadio Value="true">Yes</MudRadio>
                        <MudRadio Value="false">No</MudRadio>
                    </MudRadioGroup>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudContainer>

    @switch (SelectedEntity)
    {
        case "Cases":
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="margin-top: 2em">
                <MudGrid>
                    <MudItem xs="12" lg="3">
                        <MudPaper Elevation="3" Style="padding: 2em">
                            <MudText Align="Align.Center" Typo="Typo.h5" Style="font-weight: 500"> Upload Cases</MudText>
                            <InputFile OnChange="HandleCaseUpload" />
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="12" lg="9">
                        <CaseTable Elements="cases" />
                    </MudItem>
                </MudGrid>
            </MudContainer>
            break;
        case "CPUCoolers":
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="margin-top: 2em">
                <MudGrid>
                    <MudItem xs="12" lg="3">
                        <MudPaper Elevation="3" Style="padding: 2em">
                            <MudText Align="Align.Center" Typo="Typo.h5" Style="font-weight: 500"> Upload CPU Coolers</MudText>
                            <InputFile OnChange="HandleCPUCoolerUpload" />
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="12" lg="9">
                        <CPUCoolerTable Elements="cpuCoolers" />
                    </MudItem>
                </MudGrid>
            </MudContainer>
            break;
        case "CPUs":
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="margin-top: 2em">
                <MudGrid>
                    <MudItem xs="12" lg="3">
                        <MudPaper Elevation="3" Style="padding: 2em">
                            <MudText Align="Align.Center" Typo="Typo.h5" Style="font-weight: 500"> Upload CPUs</MudText>
                            <InputFile OnChange="HandleCPUUpload" />
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="12" lg="9">
                        <CPUTable Elements="@cpus" />
                    </MudItem>
                </MudGrid>
            </MudContainer>
            break;
        case "GPUs":
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="margin-top: 2em">
                <MudGrid>
                    <MudItem xs="12" lg="3">
                        <MudPaper Elevation="3" Style="padding: 2em">
                            <MudText Align="Align.Center" Typo="Typo.h5" Style="font-weight: 500"> Upload GPUs</MudText>
                            <InputFile OnChange="HandleGPUUpload" />
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="12" lg="9">
                        <GPUTable Elements="gpus" />
                    </MudItem>
                </MudGrid>
            </MudContainer>
            break;
        case "Motherboards":
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="margin-top: 2em">
                <MudGrid>
                    <MudItem xs="12" lg="3">
                        <MudPaper Elevation="3" Style="padding: 2em">
                            <MudText Align="Align.Center" Typo="Typo.h5" Style="font-weight: 500"> Upload Motherboards</MudText>
                            <InputFile OnChange="HandleMotherboardUpload" />
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="12" lg="9">
                        <MotherboardTable Elements="motherboards" />
                    </MudItem>
                </MudGrid>
            </MudContainer>
            break;
        case "PSUs":
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="margin-top: 2em">
                <MudGrid>
                    <MudItem xs="12" lg="3">
                        <MudPaper Elevation="3" Style="padding: 2em">
                            <MudText Align="Align.Center" Typo="Typo.h5" Style="font-weight: 500"> Upload PSUs</MudText>
                            <InputFile OnChange="HandlePSUUpload" />
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="12" lg="9">
                        <PSUTable Elements="psus" />
                    </MudItem>
                </MudGrid>
            </MudContainer>
            break;
        case "RAM":
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="margin-top: 2em">
                <MudGrid>
                    <MudItem xs="12" lg="3">
                        <MudPaper Elevation="3" Style="padding: 2em">
                            <MudText Align="Align.Center" Typo="Typo.h5" Style="font-weight: 500"> Upload RAM</MudText>
                            <InputFile OnChange="HandleRAMUpload" />
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="12" lg="9">
                        <RAMTable Elements="ram" />
                    </MudItem>
                </MudGrid>
            </MudContainer>
            break;
        case "Storage":
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="margin-top: 2em">
                <MudGrid>
                    <MudItem xs="12" lg="3">
                        <MudPaper Elevation="3" Style="padding: 2em">
                            <MudText Align="Align.Center" Typo="Typo.h5" Style="font-weight: 500"> Upload Storage</MudText>
                            <InputFile OnChange="HandleStorageUpload" />
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="12" lg="9">
                        <StorageTable Elements="storage" />
                    </MudItem>
                </MudGrid>
            </MudContainer>
            break;
        default:
            <MudText Align="Align.Center" Typo="Typo.h5" Style="padding-top: 2em">Select an Entity to operate on.</MudText>
            break;
    }

</div>

@code {
    [CascadingParameter]
    private MudTheme? theme { get; set; }

    private string? SelectedEntity { get; set; } = "";
    private bool SendToDatabase { get; set; } = false;

    private List<CaseVM> cases = new List<CaseVM>();
    private List<CPUCoolerVM> cpuCoolers = new List<CPUCoolerVM>();
    private List<CPUVM> cpus = new List<CPUVM>();
    private List<GPUVM> gpus = new List<GPUVM>();
    private List<MotherboardVM> motherboards = new List<MotherboardVM>();
    private List<PSUVM> psus = new List<PSUVM>();
    private List<RAMVM> ram = new List<RAMVM>();
    private List<StorageVM> storage = new List<StorageVM>();

    private void RadioButtonChanged(string value)
    {
        switch(SelectedEntity)
        {
            case "Cases":
                // Cases
                break;
            case "CPUCoolers":
                cpuCoolers.Clear();
                break;
            case "CPUs":
                cpus.Clear();
                break;
            case "GPUs":
                gpus.Clear();
                break;
            case "Motherboards":
                // Motherboards
                break;
            case "PSUs":
                // PSUs
                break;
            case "RAM":
                // RAM
                break;
            case "Storage":
                // Storage
                break;
            default:
                break;
        }

        SelectedEntity = value;
    }

    async Task HandleCaseUpload(InputFileChangeEventArgs e)
    {
        cases = await FileUploadFunctions.HandleCaseUpload(e);

        if (SendToDatabase)
        {
            foreach (var caseVM in cases)
            {
                await caseService.AddCaseAsync(caseVM);
            }
        }
    }

    async Task HandleCPUCoolerUpload(InputFileChangeEventArgs e)
    {
        cpuCoolers = await FileUploadFunctions.HandleCPUCoolerUpload(e);

        if (SendToDatabase)
        {
            foreach (var cpuCooler in cpuCoolers)
            {
                //await cpuCoolerService.AddCPUCoolerAsync(cpuCooler);
            }
        }
    }

    async Task HandleCPUUpload(InputFileChangeEventArgs e)
    {
        cpus = await FileUploadFunctions.HandleCPUUpload(e);

        if(SendToDatabase)
        {
            foreach (var cpu in cpus)
            {
                await cpuService.AddCPUAsync(cpu);
            }
        }
    }

    async Task HandleGPUUpload(InputFileChangeEventArgs e)
    {
        gpus = await FileUploadFunctions.HandleGPUUpload(e);

        if(SendToDatabase)
        {
            foreach (var gpu in gpus)
            {
                //await gpuService.AddGPUAsync(gpu);
            }
        }
    }

    async Task HandleMotherboardUpload(InputFileChangeEventArgs e)
    {
        motherboards = await FileUploadFunctions.HandleMotherboardUpload(e);

        if(SendToDatabase)
        {
            foreach (var motherboard in motherboards)
            {
                //await motherboardService.AddMotherboardAsync(motherboard);
            }
        }
    }

    async Task HandlePSUUpload(InputFileChangeEventArgs e)
    {
        psus = await FileUploadFunctions.HandlePSUUpload(e);

        if(SendToDatabase)
        {
            foreach (var psu in psus)
            {
                //await psuService.AddPSUAsync(psu);
            }
        }
    }

    async Task HandleRAMUpload(InputFileChangeEventArgs e)
    {
        ram = await FileUploadFunctions.HandleRAMUpload(e);

        if(SendToDatabase)
        {
            foreach (var ramVM in ram)
            {
                //await ramService.AddRAMAsync(ramVM);
            }
        }
    }

    async Task HandleStorageUpload(InputFileChangeEventArgs e)
    {
        storage = await FileUploadFunctions.HandleStorageUpload(e);

        if(SendToDatabase)
        {
            foreach (var storageVM in storage)
            {
                //await storageService.AddStorageAsync(storageVM);
            }
        }
    }
}
